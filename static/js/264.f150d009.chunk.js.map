{"version":3,"file":"static/js/264.f150d009.chunk.js","mappings":"sMACA,EAAsB,sBAAtB,EAAkD,sBAAlD,EAA+E,uB,SCW/E,EATiB,WACb,OACI,iBAAKA,UAAWC,EAAhB,WACI,gBAAKC,IAAKC,EAAOC,IAAI,YAAYJ,UAAWC,KAC5C,cAAGD,UAAWC,EAAd,4CAGX,C,wHCgBD,EAvBmB,SAAC,GAAgB,IAAdI,EAAa,EAAbA,OACZC,GAAWC,EAAAA,EAAAA,MAGjB,OACI,yBACKF,EAAOG,KAAI,SAAAC,GAAK,OACb,yBACI,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,UACI,iBAAKM,MAAO,CAACC,KAAMP,GAAWI,GAAE,kBAAaD,EAAME,IAAnD,UAC4B,OAAtBF,EAAMK,aACJ,gBAAKZ,IAAKC,EAAOC,IAAKK,EAAMM,SAC1B,gBAAKb,IAAG,0CAAqCO,EAAMK,aAAeV,IAAKK,EAAMM,SAGnF,uBAAIN,EAAMM,cARbN,EAAME,GADF,KAgB5B,E,2DCxBD,EAAwB,sBAAxB,EAAsD,sBAAtD,EAAkF,oBC0ElF,EAlEe,WACX,OAA0BK,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOX,EAAP,KAAec,EAAf,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KACA,GAAgCL,EAAAA,EAAAA,WAAS,GAAzC,eAAOM,EAAP,KAAiBC,EAAjB,MAGAC,EAAAA,EAAAA,YAAU,WACQ,KAAVP,IAGJI,GAAW,IAEXI,EAAAA,EAAAA,IAAiBR,GACZS,MAAK,SAAArB,GACEA,EAAOsB,QAAQC,OAAS,IACxBC,EAAAA,OAAAA,QAAe,iCACfN,GAAY,GACZO,QAAQC,IAAI,SAEhBZ,EAAUd,EAAOsB,QAEpB,IACAK,OAAM,WACHH,EAAAA,OAAAA,QAAe,6CAClB,IACAI,SAAQ,kBAAMZ,GAAW,EAAjB,IAEhB,GAAE,CAACJ,IAeJ,OACI,4BACI,cAAGjB,UAAWC,EAAd,2BACA,kBAAMiC,SAdO,SAAAC,GACjBA,EAAMC,iBACNb,GAAY,GACZ,IAAMc,EAAaF,EAAMG,cAAcrB,MAAMsB,MAAMC,cACnD,GAAmB,KAAfH,EACA,OAAOR,EAAAA,OAAAA,KAAY,8CAEvBX,EAASmB,EAEZ,EAKO,WACI,kBACII,KAAK,OACLC,KAAK,QACLC,WAAS,EACTC,YAAY,sBACZ5C,UAAWC,KAEf,oBAAQwC,KAAK,SAASzC,UAAWC,EAAjC,WACI,SAAC,MAAD,CAAU4C,KAAK,SADnB,eAKHzB,IAAW,SAAC0B,EAAA,EAAD,IACO,IAAlBzC,EAAOuB,SAAgB,SAAC,EAAD,CAAYvB,OAAQA,IAC3CiB,IAAY,SAACyB,EAAA,QAAD,MAGxB,C","sources":["webpack://react-homework-template/./src/components/NotFound/NotFound.module.css?3aa0","components/NotFound/NotFound.jsx","components/MoviesList/MoviesList.jsx","webpack://react-homework-template/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"box\":\"NotFound_box__DiuDZ\",\"img\":\"NotFound_img__IethY\",\"text\":\"NotFound_text__OfBlj\"};","import image from '../../images/i-dont-know-compilation-dont-know.gif';\nimport css from './NotFound.module.css';\n\nconst NotFound = () => {\n    return(\n        <div className={css.box}>\n            <img src={image} alt=\"not found\" className={css.img} />\n            <p className={css.text}>:( We coudnot find any movie</p>\n        </div>\n    )\n}\n\nexport default NotFound;","import { Link, useLocation } from \"react-router-dom\";\nimport image from '../../images/no.jpg';\n\nconst MoviesList = ({ movies }) => {\n    const location = useLocation();\n    // console.log(movies);\n    \n    return (\n        <div>\n            {movies.map(movie => (\n                <li key={movie.id}>\n                    <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                        <div state={{from: location}} to={`/movies/${movie.id}`}>\n                            {(movie.poster_path === null) ? \n                                <img src={image} alt={movie.title} />\n                                : <img src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`} alt={movie.title} />\n                            }\n\n                            <p>{movie.title}</p>\n                        </div>\n                    </Link>\n                </li>\n            ))}\n        </div>\n    )\n}\nexport default MoviesList;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Movies_title__MDLXB\",\"input\":\"Movies_input__KrUqs\",\"btn\":\"Movies_btn__TlfBQ\"};","import MoviesList from \"components/MoviesList/MoviesList\";\nimport { useEffect, useState } from \"react\";\nimport { FiSearch } from 'react-icons/fi';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { getMoviesByQuery } from \"service/movies.service\";\nimport Spinner from \"components/Spinner/Spinner\";\nimport NotFound from \"components/NotFound/NotFound\";\nimport css from './Movies.module.css';\n\nconst Movies = () => {\n    const [query, setQuery] = useState('');\n    const [movies, setMovies] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [notFound, setNotFound] = useState(false);\n    // const location = useLocation();\n\n    useEffect(() => {\n        if (query === '') {\n            return \n        }\n        setLoading(true);\n\n        getMoviesByQuery(query)\n            .then(movies => {\n                if (movies.results.length < 1) {\n                    Notify.warning(' :( We coudnot find any movie');\n                    setNotFound(true);\n                    console.log('test');\n                }\n                setMovies(movies.results);\n\n            })\n            .catch(() => {\n                Notify.failure('ðŸ¦„ :( We coudnot find any movie ');\n            })\n            .finally(() => setLoading(false));\n        \n    }, [query]);\n\n \n    \n    const handleChange = event => {\n        event.preventDefault();\n        setNotFound(false);\n        const searchInfo = event.currentTarget.query.value.toLowerCase();\n        if (searchInfo === '') {\n            return Notify.info('ðŸ¦„ Please, enter word for search');\n        }\n        setQuery(searchInfo);\n        \n    }\n    // console.log(notFound);\n    return (\n        <div>\n            <p className={css.title}>Search movie</p>\n            <form onSubmit={handleChange}>\n                <input\n                    type='text'\n                    name='query'\n                    autoFocus\n                    placeholder=\"Enter movie's title\"\n                    className={css.input}\n                />\n                <button type=\"submit\" className={css.btn}>\n                    <FiSearch size='12px' />\n                    Search\n                </button>\n            </form>\n            {loading && <Spinner />}\n            {movies.length !== 0 && <MoviesList movies={movies} />}\n            {notFound && <NotFound/>}\n        </div>    \n    )    \n};\n\nexport default Movies;"],"names":["className","css","src","image","alt","movies","location","useLocation","map","movie","to","id","state","from","poster_path","title","useState","query","setQuery","setMovies","loading","setLoading","notFound","setNotFound","useEffect","getMoviesByQuery","then","results","length","Notify","console","log","catch","finally","onSubmit","event","preventDefault","searchInfo","currentTarget","value","toLowerCase","type","name","autoFocus","placeholder","size","Spinner","NotFound"],"sourceRoot":""}